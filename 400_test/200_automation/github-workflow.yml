name: Tributary Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.node-version }}-

    - name: Install project dependencies
      run: |
        cd 200_src
        npm ci

    - name: Build Tributary CLI
      run: |
        cd 200_src
        npm run build
        npm link

    - name: Verify CLI installation
      run: |
        tributary --version

    - name: Setup test automation
      run: |
        cd 400_test/200_automation
        npm install

    - name: Run test setup
      run: |
        cd 400_test/200_automation
        node setup.js

    - name: Run CI test suite
      run: |
        cd 400_test/200_automation
        node ci-runner.js

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-node-${{ matrix.node-version }}
        path: |
          /tmp/tributary-test-*/ci-test-report.json
          /tmp/tributary-test-*/junit.xml
          /tmp/tributary-test-*/failure-report.json
        retention-days: 30

    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results (Node ${{ matrix.node-version }})
        path: '/tmp/tributary-test-*/junit.xml'
        reporter: java-junit

    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          // Find the latest test report
          const testDirs = fs.readdirSync('/tmp').filter(dir => dir.startsWith('tributary-test-'));
          if (testDirs.length > 0) {
            const reportPath = path.join('/tmp', testDirs[0], 'ci-test-report.json');
            if (fs.existsSync(reportPath)) {
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));

              const comment = `## 🧪 Tributary Test Results (Node ${{ matrix.node-version }})

              | Metric | Value |
              |--------|-------|
              | Tests Run | ${report.summary.total} |
              | ✅ Passed | ${report.summary.passed} |
              | ❌ Failed | ${report.summary.failed} |
              | 📈 Success Rate | ${report.summary.successRate}% |
              | ⏱️ Duration | ${report.summary.totalDuration}s |

              ${report.summary.failed > 0 ? '❌ **Some tests failed. Please check the full report.**' : '✅ **All tests passed!**'}
              `;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          }

    - name: Cleanup test artifacts
      if: always()
      run: |
        cd 400_test/200_automation
        node cleanup.js --force

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run security audit
      run: |
        cd 200_src
        npm audit --audit-level moderate

    - name: Run license check
      run: |
        cd 200_src
        npx license-checker --summary

  publish-test-report:
    runs-on: ubuntu-latest
    needs: test
    if: always()

    steps:
    - name: Download test artifacts
      uses: actions/download-artifact@v3
      with:
        path: test-results

    - name: Generate consolidated report
      run: |
        echo "# Tributary Test Report" > test-summary.md
        echo "Generated: $(date)" >> test-summary.md
        echo "" >> test-summary.md

        for result_dir in test-results/*/; do
          if [ -f "$result_dir/ci-test-report.json" ]; then
            node_version=$(basename "$result_dir" | sed 's/test-results-node-//')
            echo "## Node.js $node_version" >> test-summary.md

            # Extract key metrics and add to report
            python3 -c "
            import json
            import sys

            with open('$result_dir/ci-test-report.json') as f:
                data = json.load(f)
                summary = data['summary']
                print(f\"- Tests: {summary['total']}\")
                print(f\"- Passed: {summary['passed']}\")
                print(f\"- Failed: {summary['failed']}\")
                print(f\"- Success Rate: {summary['successRate']}%\")
                print(f\"- Duration: {summary['totalDuration']}s\")
            " >> test-summary.md
            echo "" >> test-summary.md
          fi
        done

    - name: Upload consolidated report
      uses: actions/upload-artifact@v3
      with:
        name: consolidated-test-report
        path: test-summary.md
        retention-days: 90