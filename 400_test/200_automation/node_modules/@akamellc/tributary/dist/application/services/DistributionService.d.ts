import { Keypair } from '@solana/web3.js';
import { SolanaRpcClient } from '../../infrastructure/rpc/SolanaRpcClient';
import { FileStorage } from '../../infrastructure/storage';
import { Logger } from '../../infrastructure/logging/Logger';
import { DistributionRequest, Distribution, NetworkType } from '../../domain/models';
export interface DistributionServiceOptions {
    rpcClient?: SolanaRpcClient;
    storage?: FileStorage;
    logger?: Logger;
    batchSize?: number;
    maxRetries?: number;
}
export interface SimulationResult {
    estimatedGasCost: number;
    estimatedDuration: number;
    distributionBreakdown: {
        totalAmount: number;
        recipientCount: number;
        averageAmount: number;
        minAmount: number;
        maxAmount: number;
    };
    riskFactors: string[];
}
export declare class DistributionService {
    private readonly adminKeypair;
    private readonly rpcClient;
    private readonly storage;
    private readonly logger;
    private readonly batchSize;
    private readonly maxRetries;
    constructor(network: NetworkType, adminKeypair: Keypair, options?: DistributionServiceOptions);
    executeDistribution(request: DistributionRequest, onProgress?: (progress: {
        completed: number;
        total: number;
        successful: number;
        failed: number;
        rate: number;
    }) => void): Promise<Distribution>;
    simulateDistribution(request: DistributionRequest): Promise<SimulationResult>;
    validateDistribution(request: DistributionRequest): Promise<{
        isValid: boolean;
        errors: string[];
        warnings: string[];
    }>;
    private validateDistributionRequest;
    private detectTokenProgram;
    private validateTokenBalance;
    private processBatch;
    private sendTokens;
    private calculateDistributionAmounts;
    private calculateEqualDistribution;
    private calculateProportionalDistribution;
    private createBatches;
    private estimateGasCost;
    private estimateDuration;
    private assessRiskFactors;
    private findDuplicateAddresses;
    private generateDistributionId;
    private saveDistribution;
    private delay;
    getDistributionHistory(): Promise<Distribution[]>;
}
//# sourceMappingURL=DistributionService.d.ts.map