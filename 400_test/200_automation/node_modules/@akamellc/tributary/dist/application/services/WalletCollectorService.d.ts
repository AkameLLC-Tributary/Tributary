import { PublicKey } from '@solana/web3.js';
import { SolanaRpcClient } from '../../infrastructure/rpc/SolanaRpcClient';
import { FileStorage } from '../../infrastructure/storage';
import { Logger } from '../../infrastructure/logging/Logger';
import { TokenHolder, WalletCollectionOptions, NetworkType } from '../../domain/models';
export interface WalletCollectorServiceOptions {
    rpcClient?: SolanaRpcClient;
    storage?: FileStorage;
    logger?: Logger;
}
export declare class WalletCollectorService {
    private readonly rpcClient;
    private readonly storage;
    private readonly logger;
    constructor(network: NetworkType, options?: WalletCollectorServiceOptions);
    collectWallets(options: WalletCollectionOptions, onProgress?: (progress: {
        current: number;
        total: number;
        rate: number;
    }) => void): Promise<TokenHolder[]>;
    private validateOptions;
    private fetchTokenHolders;
    private applyFilters;
    validateTokenAddress(tokenAddress: PublicKey): Promise<boolean>;
    getTokenSupply(tokenAddress: PublicKey): Promise<number>;
    exportWallets(holders: TokenHolder[], format?: 'json' | 'csv', filePath?: string): Promise<string>;
    private convertToCsv;
    private generateCacheKey;
    private getCachedResult;
    private cacheResult;
    clearCache(): Promise<void>;
}
//# sourceMappingURL=WalletCollectorService.d.ts.map