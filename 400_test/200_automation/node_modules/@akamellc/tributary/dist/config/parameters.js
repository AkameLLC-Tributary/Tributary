"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_PARAMETERS = void 0;
exports.loadParameters = loadParameters;
exports.getParameters = getParameters;
exports.resetParameters = resetParameters;
exports.setParameters = setParameters;
const fs = __importStar(require("fs"));
exports.DEFAULT_PARAMETERS = {
    network: {
        defaultNetwork: 'devnet',
        timeout: 30000,
        maxRetries: 3,
        retryDelay: 1000,
        confirmationTimeout: 60000,
        commitment: 'confirmed'
    },
    rpc: {
        endpoints: {
            devnet: 'https://api.devnet.solana.com',
            testnet: 'https://api.testnet.solana.com',
            'mainnet-beta': 'https://api.mainnet-beta.solana.com'
        },
        fallbackEndpoints: {
            devnet: [
                'https://rpc.ankr.com/solana_devnet',
                'https://devnet.helius-rpc.com'
            ],
            testnet: [
                'https://rpc.ankr.com/solana_testnet'
            ],
            'mainnet-beta': [
                'https://rpc.ankr.com/solana',
                'https://mainnet.helius-rpc.com'
            ]
        }
    },
    distribution: {
        defaultBatchSize: 10,
        maxBatchSize: 50,
        batchDelayMs: 100,
        estimatedGasPerTransaction: 0.000005,
        estimatedTimePerBatchSeconds: 2,
        riskThresholds: {
            largeAmountThreshold: 100000,
            largeRecipientCountThreshold: 1000,
            smallAmountThreshold: 0.001
        }
    },
    token: {
        defaultDecimals: 9,
        fallbackDecimals: 6,
        minimumBalance: 0
    },
    cache: {
        defaultTtlSeconds: 3600,
        walletCacheTtlSeconds: 1800,
        configCacheTtlSeconds: 300
    },
    logging: {
        defaultLevel: 'info',
        defaultDir: './logs',
        enableConsole: true,
        enableFile: true,
        maxFiles: 14,
        maxFileSize: '20m'
    },
    security: {
        defaultKeyEncryption: true,
        defaultBackupEnabled: true,
        defaultAuditLog: true
    },
    export: {
        defaultFormat: 'json',
        fileNamePattern: '{type}_{timestamp}.{format}'
    },
    validation: {
        maxRecipientsPerDistribution: 10000,
        minBalanceForDistribution: 0.001,
        walletValidationTimeout: 5000
    }
};
function loadParameters() {
    let params = { ...exports.DEFAULT_PARAMETERS };
    try {
        const configPath = process.env.TRIBUTARY_PARAMETERS_FILE || './tributary-parameters.json';
        if (fs.existsSync(configPath)) {
            const configFile = fs.readFileSync(configPath, 'utf-8');
            const fileParams = JSON.parse(configFile);
            params = deepMerge(params, fileParams);
        }
    }
    catch {
        console.warn('Warning: Could not load parameter configuration file, using defaults');
    }
    if (process.env.TRIBUTARY_DEFAULT_NETWORK) {
        params.network.defaultNetwork = process.env.TRIBUTARY_DEFAULT_NETWORK;
    }
    if (process.env.TRIBUTARY_NETWORK_TIMEOUT) {
        params.network.timeout = parseInt(process.env.TRIBUTARY_NETWORK_TIMEOUT);
    }
    if (process.env.TRIBUTARY_MAX_RETRIES) {
        params.network.maxRetries = parseInt(process.env.TRIBUTARY_MAX_RETRIES);
    }
    if (process.env.TRIBUTARY_RETRY_DELAY) {
        params.network.retryDelay = parseInt(process.env.TRIBUTARY_RETRY_DELAY);
    }
    if (process.env.TRIBUTARY_BATCH_SIZE) {
        params.distribution.defaultBatchSize = parseInt(process.env.TRIBUTARY_BATCH_SIZE);
    }
    if (process.env.TRIBUTARY_LOG_LEVEL) {
        params.logging.defaultLevel = process.env.TRIBUTARY_LOG_LEVEL;
    }
    if (process.env.TRIBUTARY_LOG_DIR) {
        params.logging.defaultDir = process.env.TRIBUTARY_LOG_DIR;
    }
    if (process.env.TRIBUTARY_DEVNET_RPC) {
        params.rpc.endpoints.devnet = process.env.TRIBUTARY_DEVNET_RPC;
    }
    if (process.env.TRIBUTARY_TESTNET_RPC) {
        params.rpc.endpoints.testnet = process.env.TRIBUTARY_TESTNET_RPC;
    }
    if (process.env.TRIBUTARY_MAINNET_RPC) {
        params.rpc.endpoints['mainnet-beta'] = process.env.TRIBUTARY_MAINNET_RPC;
    }
    return params;
}
function deepMerge(target, source) {
    const result = { ...target };
    for (const key in source) {
        const srcValue = source[key];
        if (srcValue && typeof srcValue === 'object' && !Array.isArray(srcValue)) {
            result[key] = deepMerge(result[key] || {}, srcValue);
        }
        else {
            result[key] = srcValue;
        }
    }
    return result;
}
let currentParameters = null;
function getParameters() {
    if (!currentParameters) {
        currentParameters = loadParameters();
    }
    return currentParameters;
}
function resetParameters() {
    currentParameters = null;
}
function setParameters(customParams) {
    currentParameters = {
        ...getParameters(),
        ...customParams
    };
}
//# sourceMappingURL=parameters.js.map