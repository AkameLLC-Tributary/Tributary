export declare class TributaryError extends Error {
    readonly code: number;
    readonly details?: Record<string, unknown> | undefined;
    constructor(message: string, code?: number, details?: Record<string, unknown> | undefined);
}
export declare class NetworkError extends TributaryError {
    constructor(message: string, details?: Record<string, unknown>);
}
export declare class ValidationError extends TributaryError {
    constructor(message: string, details?: Record<string, unknown>);
}
export declare class ConfigurationError extends TributaryError {
    constructor(message: string, details?: Record<string, unknown>);
}
export declare class AuthenticationError extends TributaryError {
    constructor(message: string, details?: Record<string, unknown>);
}
export declare class DataIntegrityError extends TributaryError {
    constructor(message: string, details?: Record<string, unknown>);
}
export declare class ResourceError extends TributaryError {
    constructor(message: string, details?: Record<string, unknown>);
}
export declare class TimeoutError extends TributaryError {
    constructor(message: string, details?: Record<string, unknown>);
}
export declare const ErrorCodes: {
    readonly SUCCESS: 0;
    readonly GENERAL_ERROR: 1;
    readonly VALIDATION_ERROR: 2;
    readonly CONFIGURATION_ERROR: 3;
    readonly NETWORK_ERROR: 4;
    readonly AUTHENTICATION_ERROR: 5;
    readonly DATA_INTEGRITY_ERROR: 6;
    readonly RESOURCE_ERROR: 7;
    readonly TIMEOUT_ERROR: 8;
};
export type ErrorCode = typeof ErrorCodes[keyof typeof ErrorCodes];
//# sourceMappingURL=index.d.ts.map