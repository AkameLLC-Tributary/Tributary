import { PublicKey } from '@solana/web3.js';
import { TokenHolder, DistributionRequest, DistributionResult, ProjectConfig, NetworkType } from '../types';
export declare class Wallet {
    readonly address: PublicKey;
    readonly balance: number;
    constructor(address: PublicKey, balance: number);
    getPercentage(totalSupply: number): number;
    toTokenHolder(totalSupply: number): TokenHolder;
}
export declare class Distribution {
    readonly id: string;
    readonly request: DistributionRequest;
    readonly createdAt: Date;
    private results;
    constructor(id: string, request: DistributionRequest, createdAt?: Date);
    addResult(result: DistributionResult): void;
    getResults(): readonly DistributionResult[];
    getSuccessfulCount(): number;
    getFailedCount(): number;
    getTotalAmount(): number;
    isCompleted(): boolean;
}
export declare class Project {
    readonly config: ProjectConfig;
    readonly createdAt: Date;
    constructor(config: ProjectConfig, createdAt?: Date);
    isMainnet(): boolean;
    getNetworkUrl(): string;
    validateNetwork(network: NetworkType): boolean;
}
export interface LogEntry {
    timestamp: Date;
    level: 'info' | 'warn' | 'error' | 'debug';
    message: string;
    metadata?: Record<string, unknown>;
    component: string;
    operation?: string;
    userId?: string;
    transactionId?: string;
}
export interface CacheData<T> {
    key: string;
    value: T;
    expiresAt: Date;
    createdAt: Date;
}
export interface PerformanceMetrics {
    operation: string;
    duration: number;
    timestamp: Date;
    success: boolean;
    errorMessage?: string;
}
export * from '../types';
//# sourceMappingURL=index.d.ts.map