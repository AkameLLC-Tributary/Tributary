"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Project = exports.Distribution = exports.Wallet = void 0;
class Wallet {
    address;
    balance;
    constructor(address, balance) {
        this.address = address;
        this.balance = balance;
    }
    getPercentage(totalSupply) {
        return (this.balance / totalSupply) * 100;
    }
    toTokenHolder(totalSupply) {
        return {
            address: this.address,
            balance: this.balance,
            percentage: this.getPercentage(totalSupply)
        };
    }
}
exports.Wallet = Wallet;
class Distribution {
    id;
    request;
    createdAt;
    results = [];
    constructor(id, request, createdAt = new Date()) {
        this.id = id;
        this.request = request;
        this.createdAt = createdAt;
    }
    addResult(result) {
        this.results.push(result);
    }
    getResults() {
        return this.results;
    }
    getSuccessfulCount() {
        return this.results.filter(r => r.status === 'confirmed').length;
    }
    getFailedCount() {
        return this.results.filter(r => r.status === 'failed').length;
    }
    getTotalAmount() {
        return this.results
            .filter(r => r.status === 'confirmed')
            .reduce((sum, r) => sum + r.amount, 0);
    }
    isCompleted() {
        return this.results.length === this.request.holders.length;
    }
}
exports.Distribution = Distribution;
class Project {
    config;
    createdAt;
    constructor(config, createdAt = new Date()) {
        this.config = config;
        this.createdAt = createdAt;
    }
    isMainnet() {
        return this.config.network === 'mainnet-beta';
    }
    getNetworkUrl() {
        switch (this.config.network) {
            case 'devnet':
                return 'https://api.devnet.solana.com';
            case 'testnet':
                return 'https://api.testnet.solana.com';
            case 'mainnet-beta':
                return 'https://api.mainnet-beta.solana.com';
            default:
                throw new Error(`Unknown network: ${this.config.network}`);
        }
    }
    validateNetwork(network) {
        return ['devnet', 'testnet', 'mainnet-beta'].includes(network);
    }
}
exports.Project = Project;
__exportStar(require("../types"), exports);
//# sourceMappingURL=index.js.map