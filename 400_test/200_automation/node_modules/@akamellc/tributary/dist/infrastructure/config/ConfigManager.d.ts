import { z } from 'zod';
import { ProjectConfig, NetworkType, LogLevel } from '../../domain/models';
declare const ProjectConfigSchema: z.ZodObject<{
    project: z.ZodObject<{
        name: z.ZodString;
        created: z.ZodOptional<z.ZodString>;
        network: z.ZodEnum<["devnet", "testnet", "mainnet-beta"]>;
    }, "strip", z.ZodTypeAny, {
        network: "devnet" | "testnet" | "mainnet-beta";
        name: string;
        created?: string | undefined;
    }, {
        network: "devnet" | "testnet" | "mainnet-beta";
        name: string;
        created?: string | undefined;
    }>;
    token: z.ZodObject<{
        base_token: z.ZodEffects<z.ZodString, string, string>;
        admin_wallet: z.ZodEffects<z.ZodString, string, string>;
    }, "strip", z.ZodTypeAny, {
        base_token: string;
        admin_wallet: string;
    }, {
        base_token: string;
        admin_wallet: string;
    }>;
    distribution: z.ZodObject<{
        schedule: z.ZodOptional<z.ZodEnum<["manual", "weekly", "monthly"]>>;
        reward_token: z.ZodOptional<z.ZodString>;
        auto_distribute: z.ZodOptional<z.ZodBoolean>;
        minimum_balance: z.ZodOptional<z.ZodNumber>;
        batch_size: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        schedule?: "manual" | "weekly" | "monthly" | undefined;
        reward_token?: string | undefined;
        auto_distribute?: boolean | undefined;
        minimum_balance?: number | undefined;
        batch_size?: number | undefined;
    }, {
        schedule?: "manual" | "weekly" | "monthly" | undefined;
        reward_token?: string | undefined;
        auto_distribute?: boolean | undefined;
        minimum_balance?: number | undefined;
        batch_size?: number | undefined;
    }>;
    security: z.ZodObject<{
        key_encryption: z.ZodOptional<z.ZodBoolean>;
        backup_enabled: z.ZodOptional<z.ZodBoolean>;
        audit_log: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        key_encryption?: boolean | undefined;
        backup_enabled?: boolean | undefined;
        audit_log?: boolean | undefined;
    }, {
        key_encryption?: boolean | undefined;
        backup_enabled?: boolean | undefined;
        audit_log?: boolean | undefined;
    }>;
    network: z.ZodOptional<z.ZodObject<{
        rpc_urls: z.ZodOptional<z.ZodObject<{
            devnet: z.ZodOptional<z.ZodString>;
            testnet: z.ZodOptional<z.ZodString>;
            'mainnet-beta': z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            devnet?: string | undefined;
            testnet?: string | undefined;
            'mainnet-beta'?: string | undefined;
        }, {
            devnet?: string | undefined;
            testnet?: string | undefined;
            'mainnet-beta'?: string | undefined;
        }>>;
        timeout: z.ZodOptional<z.ZodNumber>;
        max_retries: z.ZodOptional<z.ZodNumber>;
        retry_delay: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        rpc_urls?: {
            devnet?: string | undefined;
            testnet?: string | undefined;
            'mainnet-beta'?: string | undefined;
        } | undefined;
        timeout?: number | undefined;
        max_retries?: number | undefined;
        retry_delay?: number | undefined;
    }, {
        rpc_urls?: {
            devnet?: string | undefined;
            testnet?: string | undefined;
            'mainnet-beta'?: string | undefined;
        } | undefined;
        timeout?: number | undefined;
        max_retries?: number | undefined;
        retry_delay?: number | undefined;
    }>>;
    logging: z.ZodOptional<z.ZodObject<{
        level: z.ZodOptional<z.ZodEnum<["debug", "info", "warn", "error"]>>;
        log_dir: z.ZodOptional<z.ZodString>;
        enable_console: z.ZodOptional<z.ZodBoolean>;
        enable_file: z.ZodOptional<z.ZodBoolean>;
        max_files: z.ZodOptional<z.ZodNumber>;
        max_size: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        level?: "debug" | "info" | "warn" | "error" | undefined;
        log_dir?: string | undefined;
        enable_console?: boolean | undefined;
        enable_file?: boolean | undefined;
        max_files?: number | undefined;
        max_size?: string | undefined;
    }, {
        level?: "debug" | "info" | "warn" | "error" | undefined;
        log_dir?: string | undefined;
        enable_console?: boolean | undefined;
        enable_file?: boolean | undefined;
        max_files?: number | undefined;
        max_size?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    distribution: {
        schedule?: "manual" | "weekly" | "monthly" | undefined;
        reward_token?: string | undefined;
        auto_distribute?: boolean | undefined;
        minimum_balance?: number | undefined;
        batch_size?: number | undefined;
    };
    token: {
        base_token: string;
        admin_wallet: string;
    };
    security: {
        key_encryption?: boolean | undefined;
        backup_enabled?: boolean | undefined;
        audit_log?: boolean | undefined;
    };
    project: {
        network: "devnet" | "testnet" | "mainnet-beta";
        name: string;
        created?: string | undefined;
    };
    network?: {
        rpc_urls?: {
            devnet?: string | undefined;
            testnet?: string | undefined;
            'mainnet-beta'?: string | undefined;
        } | undefined;
        timeout?: number | undefined;
        max_retries?: number | undefined;
        retry_delay?: number | undefined;
    } | undefined;
    logging?: {
        level?: "debug" | "info" | "warn" | "error" | undefined;
        log_dir?: string | undefined;
        enable_console?: boolean | undefined;
        enable_file?: boolean | undefined;
        max_files?: number | undefined;
        max_size?: string | undefined;
    } | undefined;
}, {
    distribution: {
        schedule?: "manual" | "weekly" | "monthly" | undefined;
        reward_token?: string | undefined;
        auto_distribute?: boolean | undefined;
        minimum_balance?: number | undefined;
        batch_size?: number | undefined;
    };
    token: {
        base_token: string;
        admin_wallet: string;
    };
    security: {
        key_encryption?: boolean | undefined;
        backup_enabled?: boolean | undefined;
        audit_log?: boolean | undefined;
    };
    project: {
        network: "devnet" | "testnet" | "mainnet-beta";
        name: string;
        created?: string | undefined;
    };
    network?: {
        rpc_urls?: {
            devnet?: string | undefined;
            testnet?: string | undefined;
            'mainnet-beta'?: string | undefined;
        } | undefined;
        timeout?: number | undefined;
        max_retries?: number | undefined;
        retry_delay?: number | undefined;
    } | undefined;
    logging?: {
        level?: "debug" | "info" | "warn" | "error" | undefined;
        log_dir?: string | undefined;
        enable_console?: boolean | undefined;
        enable_file?: boolean | undefined;
        max_files?: number | undefined;
        max_size?: string | undefined;
    } | undefined;
}>;
export type ConfigData = z.infer<typeof ProjectConfigSchema>;
export declare class ConfigManager {
    private config;
    private configPath;
    private readonly logger;
    constructor(configPath?: string);
    loadConfig(): Promise<ConfigData>;
    saveConfig(config: ConfigData): Promise<void>;
    initializeProject(options: {
        name: string;
        baseToken: string;
        adminWallet: string;
        network: NetworkType;
        force?: boolean;
        customRpcUrls?: {
            devnet?: string;
            testnet?: string;
            'mainnet-beta'?: string;
        };
        overrides?: {
            distribution?: Partial<ConfigData['distribution']>;
            security?: Partial<ConfigData['security']>;
            network?: Partial<ConfigData['network']>;
            logging?: Partial<ConfigData['logging']>;
        };
    }): Promise<ConfigData>;
    getConfig(): ConfigData;
    getProjectConfig(): ProjectConfig;
    getNetworkConfig(): {
        network: "devnet" | "testnet" | "mainnet-beta";
        rpcUrl: string | undefined;
        timeout: number;
        maxRetries: number;
        retryDelay: number;
    };
    getLoggingConfig(): {
        level: LogLevel;
        logDir: string;
        enableConsole: boolean;
        enableFile: boolean;
        maxFiles: number;
        maxSize: string;
    };
    updateConfig(updates: Partial<ConfigData>): Promise<void>;
    validateConfig(configPath?: string): Promise<{
        isValid: boolean;
        errors: string[];
        warnings: string[];
    }>;
    configExists(): Promise<boolean>;
    getConfigPath(): string;
    setConfigPath(configPath: string): void;
    private stringifyToml;
    private formatTomlValue;
    private deepMerge;
    private getDefaultRpcUrls;
}
export {};
//# sourceMappingURL=ConfigManager.d.ts.map