import { Connection, PublicKey } from '@solana/web3.js';
import { TokenHolder, NetworkType } from '../../domain/models';
export interface SolanaRpcClientOptions {
    network: NetworkType;
    rpcUrl?: string;
    timeout?: number;
    maxRetries?: number;
    retryDelay?: number;
}
export declare class SolanaRpcClient {
    private connection;
    private readonly timeout;
    private readonly maxRetries;
    private readonly retryDelay;
    constructor(options: SolanaRpcClientOptions);
    private getDefaultRpcUrl;
    getTokenHolders(tokenMintAddress: PublicKey, threshold?: number): Promise<TokenHolder[]>;
    private fetchTokenHolders;
    getTokenSupply(tokenMintAddress: PublicKey): Promise<number>;
    getTokenDecimals(tokenMintAddress: PublicKey): Promise<number>;
    validateTokenAddress(tokenAddress: PublicKey): Promise<boolean>;
    validateWalletAddress(walletAddress: PublicKey): Promise<boolean>;
    getConnection(): Connection;
    private withTimeout;
    withRetry<T>(operation: () => Promise<T>, maxRetries?: number): Promise<T>;
    private delay;
    private detectTokenProgram;
    private fetchToken2022Holders;
    private fetchToken2022HoldersByTransactions;
}
//# sourceMappingURL=SolanaRpcClient.d.ts.map