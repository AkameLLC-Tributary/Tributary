"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = void 0;
const winston_1 = __importDefault(require("winston"));
class Logger {
    logger;
    constructor() {
        this.logger = winston_1.default.createLogger({
            level: process.env.LOG_LEVEL || 'info',
            format: winston_1.default.format.combine(winston_1.default.format.timestamp(), winston_1.default.format.errors({ stack: true }), winston_1.default.format.json()),
            defaultMeta: { service: 'tributary' },
            transports: [
                new winston_1.default.transports.File({ filename: 'logs/error.log', level: 'error' }),
                new winston_1.default.transports.File({ filename: 'logs/combined.log' }),
            ],
        });
        if (process.env.NODE_ENV !== 'production') {
            this.logger.add(new winston_1.default.transports.Console({
                format: winston_1.default.format.simple()
            }));
        }
    }
    info(message, metadata) {
        this.logger.info(message, metadata);
    }
    warn(message, metadata) {
        this.logger.warn(message, metadata);
    }
    error(message, error, metadata) {
        this.logger.error(message, { error: error?.stack, ...metadata });
    }
    debug(message, metadata) {
        this.logger.debug(message, metadata);
    }
    logOperation(component, operation, level, message, metadata) {
        this.logger.log(level, message, { component, operation, ...metadata });
    }
}
exports.logger = new Logger();
//# sourceMappingURL=logger.js.map